import time

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from base.keyboards import *
from base.states import *
from base.tools import *

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher

from base.config import (COMPLAINS_COUNT, CUSTOMIZE_AD_INTERVAL, COMPLAINS_PEER_ID, ADMIN_IDS, TELEGRAM_API_KEY,
                         CATEGORIES)

from aiogram import Bot
import sqlite3
import asyncio
import datetime

bot = Bot(token=TELEGRAM_API_KEY)
dispatcher = Dispatcher(bot=bot,
                        storage=MemoryStorage())

database = sqlite3.connect('database.db')
cursor = database.cursor()


def get_current_date() -> str:
    """ Return today date """
    return datetime.date.today().__str__()


def get_current_date_class() -> datetime.date:
    return datetime.date.today()


def make_ad_settings():
    ad = cursor.execute(f'SELECT * FROM ad').fetchall()
    if not ad:
        cursor.execute(f'INSERT INTO ad (text) VALUES ("–ü–æ–∫–∞–∑ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞");')
        database.commit()
        ad = cursor.execute(f'SELECT * FROM ad').fetchall()[-1]
    else:
        ad = ad[-1]

    def _generate_ad_settings_message(_ad: tuple) -> str:
        if _ad:
            is_unique = '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π' if _ad[3] == 1 else '–ù–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π'
            _answer = (f'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø–æ–∫–∞–∑–µ: {_ad[1]}\n'
                       f'üìñ –¢–µ–∫—Å—Ç –ø–æ–∫–∞–∑–∞: {_ad[2]}\n\n'
                       f'‚ùì {is_unique}\n'
                       f'üìà –õ–∏–º–∏—Ç –ø–æ–∫–∞–∑–∞: {_ad[4]}\n\n'
                       f'–ï—Å–ª–∏ –ø–æ–∫–∞–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —Ç–æ –ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–∞ - '
                       f'—ç—Ç–æ –ª–∏–º–∏—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ï—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ '
                       f'–ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–∞ - –ª–∏–º–∏—Ç –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–∫–∞–∑–æ–≤')
            return _answer
        else:
            return '‚ùó –ü–æ–∫–∞–∑—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'

    answer = f'üìä –ù–∞—Å—Ç–æ–π–∫–∞ –ø–æ–∫–∞–∑–æ–≤;\n\n{_generate_ad_settings_message(ad)}'

    return answer


def check_ad_view(user_id) -> tuple | bool:
    ad = cursor.execute(f'SELECT * FROM ad').fetchall()
    if ad:
        ad = ad[-1]
        ad_id = ad[0]
        ad_views = ad[1]
        ad_unique = ad[3]
        ad_limit = ad[4]

        messages_count = \
            cursor.execute(f'SELECT text_messages_count FROM user_statistics WHERE user_id={user_id}').fetchone()[0]
        unique_ad_views = cursor.execute(f'SELECT COUNT(*) FROM ad_views '
                                         f'WHERE user_id={user_id} AND ad_id={ad_id}').fetchone()[0]

        if messages_count % CUSTOMIZE_AD_INTERVAL == 0 and messages_count > 0:
            if (ad_unique == 1 and unique_ad_views <= ad_limit) or \
                    (ad_unique == 0 and ad_views < ad_limit):
                if ad_unique == 1:
                    cursor.execute(f'INSERT INTO ad_views (user_id, ad_id) VALUES ('
                                   f'{user_id}, {ad_id});')
                cursor.execute(f'UPDATE ad SET views_count=views_count+1')
                return ad
    return False


async def cancel(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.finish()

    answer = '‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    await cq.message.edit_text(text=answer)


async def mailing_dashboard_cq_handler(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await MailingStatesGroup.set_mailing_text_state.set()

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_dashboard'))

    answer = ('‚åõ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n'
              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å '
              '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏ –∏—Ö.\n'
              '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ html –≤—Å—Ç—Ä–æ–µ–Ω–∞.\n\n')
    await cq.message.edit_text(text=answer,
                               reply_markup=keyboard)


async def set_mailing_keyboard_cq(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await MailingStatesGroup.set_mailing_keyboard_state.set()

    answer = ('üìå –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏ '
              '–∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
              '—Ç–µ–∫—Å—Ç - —Å—Å—ã–ª–∫–∞\n'
              '—Ç–µ–∫—Å—Ç1 - —Å—Å—ã–ª–∫–∞1.\n\n'
              '–ü—Ä–∏–º–µ—Ä:\n–ù–∞–∂–º–∏! - https://google.com\n'
              '–ù–∞–∂–º–∏ –µ—â—ë! - https://google.com')
    await cq.message.edit_text(text=answer)


async def test_mailing(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    data = await state.get_data()

    answer = ('‚Ñπ –°–µ–π—á–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'
              '{}'.format(data['mailingText']))

    keyboard = InlineKeyboardMarkup()
    if data.get('mailingKeyboard'):
        for button in data['mailingKeyboard']:
            keyboard.add(InlineKeyboardButton(text=button, url=data['mailingKeyboard'][button]))

    photo = data.get('mailingPhoto', None)
    voice = data.get('mailingVoice', None)
    animation = data.get('mailingAnimation', None)

    if photo:
        await cq.message.answer_photo(photo=photo, caption=answer, reply_markup=keyboard, parse_mode='html')
    elif voice:
        await cq.message.answer_voice(voice=voice, caption=answer, reply_markup=keyboard, parse_mode='html')
    elif animation:
        await cq.message.answer_animation(animation=animation, caption=answer, reply_markup=keyboard, parse_mode='html')
    else:
        await cq.message.answer(text=answer, reply_markup=keyboard, parse_mode='html')


async def set_mailing_sample_menu(cq: CallbackQuery, state: FSMContext):
    await MailingStatesGroup.set_mailing_sample_state.set()
    await cq.answer()

    answer = 'üë• –£–∫–∞–∂–∏—Ç–µ –≤—ã–±–æ—Ä–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏'
    await cq.message.edit_text(text=answer, reply_markup=mailing_samples_keyboard)


async def set_mailing_sample(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    if 'sample' in cq.data and ('male' in cq.data or 'all' in cq.data):
        answer = 'üìä –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É'
        await cq.message.edit_text(text=answer)

        data = await state.get_data()
        photo = data.get('mailingPhoto', None)
        voice = data.get('mailingVoice', None)
        animation = data.get('mailingAnimation', None)
        text = data['mailingText']
        raw_keyboard = data.get('mailingKeyboard', None)

        keyboard = None
        if raw_keyboard:
            keyboard = InlineKeyboardMarkup()
            for button in raw_keyboard:
                keyboard.add(InlineKeyboardButton(text=button, url=raw_keyboard[button]))

        async def mailing():
            sample = cq.data.split('_sample')[0]
            params = str()
            if sample != 'all':
                params += f' AND sex="{sample}"'
            if data.get('ageSample'):
                try:
                    start_age, finish_age = list(map(str.strip, data.get('ageSample').split('-')))
                    params += f' AND age<={finish_age} AND age>={start_age}'
                except ValueError:
                    ...

            if data.get('usersCountSample'):
                params += f' LIMIT {data.get("usersCountSample")}'
            user_ids = cursor.execute(f'SELECT user_id FROM users WHERE is_blocked=0{params}').fetchall()

            users_count = len(user_ids)
            blocked_users_count = 0

            start = time.time()

            for user_id in user_ids:
                user_id = user_id[0]
                try:
                    if photo:
                        await bot.send_photo(chat_id=user_id,
                                             photo=photo,
                                             caption=text,
                                             parse_mode='html',
                                             reply_markup=keyboard
                                             )
                    elif voice:
                        await bot.send_voice(chat_id=user_id,
                                             voice=voice,
                                             caption=text,
                                             parse_mode='html',
                                             reply_markup=keyboard
                                             )
                    elif animation:
                        await bot.send_animation(chat_id=user_id,
                                                 animation=animation,
                                                 caption=text,
                                                 parse_mode='html',
                                                 reply_markup=keyboard
                                                 )
                    else:
                        await bot.send_message(chat_id=user_id,
                                               text=text,
                                               parse_mode='html',
                                               reply_markup=keyboard)
                    cursor.execute(f'UPDATE users SET '
                                   f'is_blocked=0 WHERE '
                                   f'user_id={user_id}')
                except Exception as error:
                    blocked_users_count += 1
                    cursor.execute(f'UPDATE users SET '
                                   f'is_blocked=1 WHERE '
                                   f'user_id={user_id}')

            await bot.send_message(chat_id=cq.from_user.id,
                                   text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n'
                                        f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n'
                                        f'–ê–∫—Ç–∏–≤–Ω—ã—Ö: {users_count - blocked_users_count}\n'
                                        f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {blocked_users_count}\n\n'
                                        f'‚åõ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {round(time.time() - start, 1)}s.')

        await cq.message.answer(text=f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.')
        asyncio.create_task(mailing())
        await state.finish()

    elif cq.data == 'select_mailing_age_sample':
        answer = '–£–∫–∞–∂–∏—Ç–µ –≤—ã–±–æ—Ä–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n' \
                 '–ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç-–∫–æ–Ω–µ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.\n\n' \
                 '–ü—Ä–∏–º–µ—Ä:\n' \
                 '14-20'
        await cq.message.edit_text(text=answer)
        await MailingStatesGroup.select_age_sample_state.set()

    elif cq.data == 'select_users_count_sample':
        answer = '–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞—Å—Å—ã–ª–∫–µ —á–∏—Å–ª–æ–º:'
        await cq.message.edit_text(text=answer)
        await MailingStatesGroup.select_users_count_sample_state.set()


async def customize_ad(cq: CallbackQuery, state: FSMContext):
    await cq.answer()

    ad = cursor.execute(f'SELECT * FROM ad').fetchall()
    if not ad:
        cursor.execute(f'INSERT INTO ad (text) VALUES ("–ü–æ–∫–∞–∑ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞");')
        database.commit()
        ad = cursor.execute(f'SELECT * FROM ad').fetchall()[-1]
    else:
        ad = ad[-1]

    def _generate_ad_settings_message(_ad: tuple) -> str:
        if _ad:
            is_unique = '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π' if _ad[3] == 1 else '–ù–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π'
            _answer = (f'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø–æ–∫–∞–∑–µ: {_ad[1]}\n'
                       f'üìñ –¢–µ–∫—Å—Ç –ø–æ–∫–∞–∑–∞: {_ad[2]}\n\n'
                       f'‚ùì {is_unique}\n'
                       f'üìà –õ–∏–º–∏—Ç –ø–æ–∫–∞–∑–∞: {_ad[4]}\n\n'
                       f'–ï—Å–ª–∏ –ø–æ–∫–∞–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —Ç–æ –ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–∞ - '
                       f'—ç—Ç–æ –ª–∏–º–∏—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ï—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ '
                       f'–ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–∞ - –ª–∏–º–∏—Ç –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–∫–∞–∑–æ–≤')
            return _answer
        else:
            return '‚ùó –ü–æ–∫–∞–∑—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'

    answer = f'üìä –ù–∞—Å—Ç–æ–π–∫–∞ –ø–æ–∫–∞–∑–æ–≤;\n\n{_generate_ad_settings_message(ad)}'

    await cq.message.edit_text(text=answer, parse_mode='html',
                               reply_markup=customize_ad_keyboard)


async def set_ad_text_cq(cq: CallbackQuery, state: FSMContext):
    await cq.answer()

    answer = 'üìñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑–∞;\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ html –≤—Å—Ç—Ä–æ–µ–Ω–∞.\n\n'

    await cq.message.edit_text(text=answer)
    await CustomizeAdStatesGroup.set_ad_text.set()


async def set_ad_limit_cq(cq: CallbackQuery, state: FSMContext):
    await cq.answer()

    await cq.message.edit_text(text='üìñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞;', reply_markup=cancel_keyboard)
    await CustomizeAdStatesGroup.set_ad_limit.set()


async def set_ad_unique_cq(cq: CallbackQuery, state: FSMContext):
    await cq.answer()

    ad = cursor.execute(f'SELECT * FROM ad').fetchall()[-1]
    cursor.execute(f'UPDATE ad SET is_unique={1 if ad[3] == 0 else 0};')
    database.commit()

    await cq.message.edit_text(text=make_ad_settings(), parse_mode='html',
                               reply_markup=customize_ad_keyboard)
    await state.finish()


async def users_statistic(cq: CallbackQuery, state: FSMContext):
    await cq.answer()

    def get_pers(table_column_name: str):
        per_all_time = cursor.execute(f'SELECT COUNT(*) '
                                      f'FROM {table_column_name}').fetchone()[0]
        per_day = cursor.execute(f'SELECT COUNT(*) '
                                 f'FROM {table_column_name} WHERE '
                                 f'created='
                                 f'"{get_current_date()}"').fetchone()[0]
        per_month = 0
        per_week = 0

        for index in range(31):
            days_invetral = datetime.timedelta(days=index)
            interval = get_current_date_class() - days_invetral
            format_interval = str(interval)
            if index <= 7:
                per_week += cursor.execute(f'SELECT COUNT(*) '
                                           f'FROM {table_column_name} WHERE '
                                           f'created='
                                           f'"{format_interval}"').fetchone()[0]
            per_month += cursor.execute(f'SELECT COUNT(*) '
                                        f'FROM {table_column_name} WHERE '
                                        f'created='
                                        f'"{format_interval}"').fetchone()[0]
        data = {
            'per_day': per_day,
            'per_week': per_week,
            'per_month': per_month,
            'per_all_time': per_all_time
        }
        return data

    def generate_pers_answer(pers_data: dict, verbose_name_plural: str) -> str:
        _answer = (f'–í—Å–µ–≥–æ: {pers_data["per_all_time"]} {verbose_name_plural}.\n'
                   f'–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {pers_data["per_day"]} {verbose_name_plural}.\n'
                   f'–ó–∞ –Ω–µ–¥–µ–ª—é: {pers_data["per_week"]} {verbose_name_plural}.\n'
                   f'–ó–∞ –º–µ—Å—è—Ü: {pers_data["per_month"]} {verbose_name_plural}.\n')
        return _answer

    users_pers = get_pers('users')
    messages_pers = get_pers('messages')

    public_messages = cursor.execute(f'SELECT COUNT(*) '
                                     f'FROM public_messages').fetchone()[0]
    messages = cursor.execute(f'SELECT COUNT(*) '
                              f'FROM messages').fetchone()[0]

    answer = ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n'
              f'üîî –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{generate_pers_answer(users_pers, "—á–µ–ª")}\n'
              f'‚úâ –°–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É:\n–í—Å–µ–≥–æ: {messages_pers["per_all_time"]}\n\n'
              f'üëÄ –ü—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n–í—Å–µ–≥–æ: {public_messages}\n\n'
              f'üîë –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n–í—Å–µ–≥–æ: {messages}')
    await cq.message.edit_text(text=answer, reply_markup=admin_dashboard_keyboard)


async def create_referral_link_cq(cq: CallbackQuery, state: FSMContext):
    await cq.answer()

    answer = '–£–∫–∞–∂–∏ –∏–º—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:'

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='referral_links'))

    await cq.message.edit_text(text=answer, reply_markup=keyboard)

    await CreateReferralLinkStatesGroup.set_referral_link_name.set()


async def referral_links(cq: CallbackQuery, state: FSMContext):
    links = cursor.execute(f'SELECT id, name FROM referral_links').fetchall()

    keyboard = InlineKeyboardMarkup()
    for link in links:
        keyboard.add(InlineKeyboardButton(text=link[1], callback_data=link[0]))
    keyboard.add(InlineKeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É',
                                      callback_data='create_referral_link'))
    keyboard.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_dashboard'))
    answer = '‚õì –í—ã–±–µ—Ä–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:'
    await cq.message.edit_text(text=answer, reply_markup=keyboard)

    await ViewReferralLinksStatesGroup.open_link.set()


async def view_referral_link(cq: CallbackQuery, state: FSMContext):
    link = cursor.execute(f'SELECT id, name, created FROM referral_links WHERE id="{cq.data}"').fetchone()
    invited_count = \
        cursor.execute(f'SELECT COUNT(*) FROM referral_invited_users WHERE referral_link_id="{cq.data}"').fetchone()[0]

    message = cursor.execute(
        f'SELECT message FROM welcome_messages_referral_links WHERE link_id="{cq.data}"').fetchone()
    bot_me = await bot.get_me()

    answer = f'‚õì –°—Å—ã–ª–∫–∞ #{link[0]}\n\n' \
             f'–°—Å—ã–ª–∫–∞: https://t.me/{bot_me["username"]}?start={link[0]}\n' \
             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ—à–ª–æ: {invited_count}\n' \
             f'–ù–∞–∑–≤–∞–Ω–∏–µ: {link[1]}\n' \
             f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {link[2]}\n\n' \
             f'‚úâ –°–æ–æ–±—â–µ–Ω–∏–µ: {get_absolute_value(message)}'

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('‚úâ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                                      callback_data=f'add_welcome_message_referral_link_{link[0]}'))
    keyboard.add(InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å',
                                      callback_data=f'delete_referral_link_{link[0]}'))
    keyboard.add(InlineKeyboardButton('‚¨Ö –°—Å—ã–ª–∫–∏',
                                      callback_data='referral_links'))

    await cq.message.edit_text(text=answer, reply_markup=keyboard)

    await ViewReferralLinksStatesGroup.view_link.set()


async def delete_referral_link(cq: CallbackQuery, state: FSMContext):
    link_id = cq.data.split('delete_referral_link_')[1]
    cursor.execute(f'DELETE FROM referral_links WHERE id="{link_id}"')
    database.commit()

    answer = '‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞'

    await cq.message.edit_text(text=answer, reply_markup=admin_dashboard_keyboard)


async def add_welcome_message_referral_link(cq: CallbackQuery, state: FSMContext):
    link_id = cq.data.split('add_welcome_message_referral_link_')[1]
    cursor.execute(f'INSERT OR IGNORE INTO '
                   f'welcome_messages_referral_links '
                   f'(link_id) VALUES ("{link_id}")')
    database.commit()

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('‚¨Ö –°—Å—ã–ª–∫–∏',
                                      callback_data='referral_links'))

    answer = '‚úâ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.'

    await cq.message.edit_text(text=answer, reply_markup=keyboard)

    await AddWelcomeMessageReferralLinkStatesGroup.set_welcome_message_text_state.set()

    data = {'link_id': link_id}

    await state.set_data(data=data)


async def cq_admin_dashboard(cq: CallbackQuery, state: FSMContext):
    answer = ('üìä –ü–∞–Ω–µ–ª—å '
              '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.')
    await cq.message.edit_text(text=answer, reply_markup=admin_dashboard_keyboard)
    await state.finish()
